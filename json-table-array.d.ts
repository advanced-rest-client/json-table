/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   json-table-array.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {JsonTableMixin} from './json-table-mixin.js';

declare namespace UiElements {

  /**
   * An element that displays array structure.
   *
   * ### Example
   *
   * ```html
   * <json-table-array json="[...]"></json-table-array>
   * ```
   */
  class JsonTableArray extends
    JsonTableMixin(
    Object) {

    /**
     * An object to render.
     */
    json: any[]|null|undefined;
    readonly columns: any;
    paginate: any;
    page: any;
    itemsPerPage: any;

    /**
     * List of computed column names
     */
    _columns: any[]|null|undefined;

    /**
     * data model created from the `json` attribute.
     */
    _display: any[]|null|undefined;

    /**
     * A label for start index in pagination (1-based)
     */
    _startItemLabel: number|null|undefined;

    /**
     * A label for end index in pagination (1-based)
     */
    _endItemLabel: number|null|undefined;

    /**
     * A label for end index in pagination (1-based)
     */
    _maxItemsLabel: number|null|undefined;
    _paginationTemplate(): any;
    _dispayTemplate(display: any, hasColumns: any, columns: any): any;
    render(): any;

    /**
     * Creates a data model from the `json` property.
     *
     * TODO: This should be a deep data observer to update only the portion of the model that
     * actually has changed.
     */
    _jsonChanged(json: any[]|null): void;
    _computeDisplay(): void;

    /**
     * Computes the list of column names for the table.
     * It will contain all properties keys fond in the array.
     */
    _computeColumns(json: any[]|null): Array<String|null>|null;

    /**
     * Checks if passed `item` is a primitive
     */
    _isPrimitive(item: any, column: any): any;
    _isObject(item: any, column: any): any;
    _isEnum(item: any, column: any): any;
    _isArray(item: any, column: any): any;
    _getValue(item: any, column: any): any;
    _toggleItem(e: any): void;

    /**
     * When pagination is enabled this will increase page number.
     * This will do nothing if pagination isn't enabled or there's no next page of results to
     * display.
     */
    nextPage(): Boolean|null;

    /**
     * When pagination is enabled this will decrease page number.
     * This will do nothing if pagination isn't enabled or there's no previous page of results to
     * display.
     */
    previousPage(): void;

    /**
     * Computes if the previous page button for the pagination should be disabled.
     *
     * @param page Current page index
     * @returns true if there's previous page of the results
     */
    _isDisabedPrevious(page: Number|null): Boolean|null;
    _isDisabedNext(maxItemsLabel: any, endItemLabel: any): any;
    _computeValueSize(item: any, column: any): any;
    _ippHandler(e: any): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "json-table-array": UiElements.JsonTableArray;
  }
}
