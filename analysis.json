{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "json-table-primitive-teaser.js",
      "properties": [
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "If true then the whole value will be visible.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "observer",
          "type": "Object | null | undefined",
          "description": "DOM change observer",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_isOverflow",
          "type": "boolean | null | undefined",
          "description": "if true then the content overflows the max height area.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "maxHeight",
          "type": "string | null | undefined",
          "description": "Container's max height when closed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_maxHeightChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"160px\""
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_contentChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 108,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toggle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 2
            },
            "end": {
              "line": 113,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeToggleLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 117,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ]
        },
        {
          "name": "_maxHeightChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "maxHeight"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 125,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "JsonTablePrimitiveTeaser",
      "attributes": [
        {
          "name": "opened",
          "description": "If true then the whole value will be visible.",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "observer",
          "description": "DOM change observer",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "max-height",
          "description": "Container's max height when closed.",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "json-table-primitive-teaser"
    },
    {
      "description": "An element that displays array structure.\n\n### Example\n\n```html\n<json-table-array json=\"[...]\"></json-table-array>\n```\n\n### Styling\n\n`<json-table>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--json-table-array` | Mixin applied to the element | `{}`",
      "summary": "",
      "path": "json-table-array.js",
      "properties": [
        {
          "name": "page",
          "type": "number | null | undefined",
          "description": "In pagination, page index",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "itemsPerPage",
          "type": "number | null | undefined",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "20",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "paginate",
          "type": "boolean | null | undefined",
          "description": "If true then the pagination will be enabled for the arrays.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "json",
          "type": "Array | null | undefined",
          "description": "An object to render.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 261,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_jsonChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "List of computed column names",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_columnsChanged\"",
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "hasColumns",
          "type": "boolean | null | undefined",
          "description": "True if columns list is available.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "display",
          "type": "Array | null | undefined",
          "description": "data model created from the `json` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "startItemLabel",
          "type": "number | null | undefined",
          "description": "A label for start index in pagination (1-based)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "endItemLabel",
          "type": "number | null | undefined",
          "description": "A label for end index in pagination (1-based)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "maxItemsLabel",
          "type": "number | null | undefined",
          "description": "A label for end index in pagination (1-based)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "isArray",
          "description": "Returns true if given argument is an array",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isObject",
          "description": "Returns true if given argument is an object.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isPrimitive",
          "description": "Check if given object is one of the primitives.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "An object to test"
            }
          ],
          "return": {
            "desc": "True if the object is one of:\n- string\n- number\n- boolean\n- undefined\n- null"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "getPropertyModel",
          "description": "Creates a data model for single proerty.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "A property name in the JSON structure"
            },
            {
              "name": "value",
              "type": "any",
              "description": "Value associated with the property."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property. Model contains following\nkeys:\n\n- key - a property name\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "getItemModel",
          "description": "Creates a model for a value.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "any",
              "description": "Array item or property value to create a model from."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property value or array item. Model\ncontains following keys:\n\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isEnum",
          "description": "Checks if given array is enum (contains primitives only).",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array",
              "description": "An array to test."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the array contains primitive values only. False otherwise."
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_isEnumOrArray",
          "description": "Computes if the passed record's object is a type of array or enum.",
          "privacy": "protected",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_computeArraySize",
          "description": "Computes the size of item's value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_jsonChanged",
          "description": "Creates a data model from the `json` property.\n\nTODO: This should be a deep data observer to update only the portion of the model that\nactually has changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDisplay",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 2
            },
            "end": {
              "line": 344,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            },
            {
              "name": "paginate"
            },
            {
              "name": "page"
            },
            {
              "name": "itemsPerPage"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeColumns",
          "description": "Computes the list of column names for the table.\nIt will contain all properties keys fond in the array.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 2
            },
            "end": {
              "line": 366,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ]
        },
        {
          "name": "_columnsChanged",
          "description": "Sets the `hasColumns` property when columns array change",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 2
            },
            "end": {
              "line": 374,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isPrimitive",
          "description": "Checks if passed `item` is a primitive",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 376,
              "column": 2
            },
            "end": {
              "line": 385,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_isObject",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 387,
              "column": 2
            },
            "end": {
              "line": 396,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_isEnum",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 407,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_isArray",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 2
            },
            "end": {
              "line": 418,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_getValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 2
            },
            "end": {
              "line": 428,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_toggleItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 2
            },
            "end": {
              "line": 458,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "nextPage",
          "description": "When pagination is enabled this will increase page number.\nThis will do nothing if pagination isn't enabled or there's no next page of results to\ndisplay.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 464,
              "column": 2
            },
            "end": {
              "line": 471,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "previousPage",
          "description": "When pagination is enabled this will decrease page number.\nThis will do nothing if pagination isn't enabled or there's no previous page of results to\ndisplay.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 477,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isDisabedPrevious",
          "description": "Computes if the previous page button for the pagination should be disabled.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 489,
              "column": 2
            },
            "end": {
              "line": 491,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "page",
              "type": "Number",
              "description": "Current page index"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if there's previous page of the results"
          }
        },
        {
          "name": "_isDisabedNext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 493,
              "column": 2
            },
            "end": {
              "line": 498,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "maxItemsLabel"
            },
            {
              "name": "endItemLabel"
            }
          ]
        },
        {
          "name": "_computeValueSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 500,
              "column": 2
            },
            "end": {
              "line": 503,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 504,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.JsonTableArray",
      "attributes": [
        {
          "name": "page",
          "description": "In pagination, page index",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "items-per-page",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "paginate",
          "description": "If true then the pagination will be enabled for the arrays.",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "json",
          "description": "An object to render.",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 261,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "columns",
          "description": "List of computed column names",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "has-columns",
          "description": "True if columns list is available.",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "display",
          "description": "data model created from the `json` attribute.",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "start-item-label",
          "description": "A label for start index in pagination (1-based)",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "end-item-label",
          "description": "A label for end index in pagination (1-based)",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max-items-label",
          "description": "A label for end index in pagination (1-based)",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "json-table-array",
      "mixins": [
        "JsonTableMixin"
      ]
    },
    {
      "description": "An element that displays object structure.\n\n### Example\n\n```html\n<json-table-object json=\"{...}\"></json-table-object>\n```\n\n### Styling\n\n`<json-table>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--json-table-object` | Mixin applied to the element | `{}`",
      "summary": "",
      "path": "json-table-object.js",
      "properties": [
        {
          "name": "page",
          "type": "number | null | undefined",
          "description": "In pagination, page index",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "itemsPerPage",
          "type": "number | null | undefined",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "20",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "paginate",
          "type": "boolean | null | undefined",
          "description": "If true then the pagination will be enabled for the arrays.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "json",
          "type": "Object | null | undefined",
          "description": "An object to render.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_jsonChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "display",
          "type": "Array | null | undefined",
          "description": "data model created from the `json` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "isArray",
          "description": "Returns true if given argument is an array",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isObject",
          "description": "Returns true if given argument is an object.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isPrimitive",
          "description": "Check if given object is one of the primitives.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "An object to test"
            }
          ],
          "return": {
            "desc": "True if the object is one of:\n- string\n- number\n- boolean\n- undefined\n- null"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "getPropertyModel",
          "description": "Creates a data model for single proerty.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "A property name in the JSON structure"
            },
            {
              "name": "value",
              "type": "any",
              "description": "Value associated with the property."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property. Model contains following\nkeys:\n\n- key - a property name\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "getItemModel",
          "description": "Creates a model for a value.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "any",
              "description": "Array item or property value to create a model from."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property value or array item. Model\ncontains following keys:\n\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isEnum",
          "description": "Checks if given array is enum (contains primitives only).",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array",
              "description": "An array to test."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the array contains primitive values only. False otherwise."
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_isEnumOrArray",
          "description": "Computes if the passed record's object is a type of array or enum.",
          "privacy": "protected",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_computeArraySize",
          "description": "Computes the size of item's value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_jsonChanged",
          "description": "Creates a data model from the JSON object.\nThe element is only interested in first level properties. Other properties will be rendered\nby child elements.\n\nTODO: This should be a deep data observer to update only the portion of the model that\nactually has changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ]
        },
        {
          "name": "_computeItemClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 39,
          "column": 0
        },
        "end": {
          "line": 219,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.JsonTableObject",
      "attributes": [
        {
          "name": "page",
          "description": "In pagination, page index",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "items-per-page",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "paginate",
          "description": "If true then the pagination will be enabled for the arrays.",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "json",
          "description": "An object to render.",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "display",
          "description": "data model created from the `json` attribute.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "json-table-object",
      "mixins": [
        "JsonTableMixin"
      ]
    },
    {
      "description": "A table view from the JSON structure.\n\nThe element will render a table and / or list view from the JSON object.\nIf give JSON is am array it will display a table. For objects it will display list view.\n\nComplex object are represented as a embedded view of the list / table inside the parent object\nrepresentation. That may create very complex structure and lead to performance issues when computing\ndata model and building the DOM. Therefore the element will only build the first level of the view.\nIf the object / array contains other objects / arrays it will show only a button to display embeded\nobjects. That should prohibit from freezing the UI while rendering the view.\n\nAnother optimization is pagination (disabled by default). After setting the `paginate` property\narray tables will contain a pagination with `itemsPerPage` items rendered at a time. The user can\nchange number of items at any time.\n\n### Example\n```html\n<json-table json=\"[...]\" paginate items-per-page=\"15\"></json-table>\n```\n\n## Content actions\n\nThe element can render an actions pane above the table / list view. Action pane is to\ndisplay content actions that is relevant in context of the content displayed\nbelow the buttons. It should be icon buttons list or just buttons added to this view.\n\nButtons must have `content-action` property set to be included to this view.\n\n```html\n<json-table json='{\"json\": \"test\"}'>\n <paper-icon-button slot=\"content-action\" title=\"Copy content to clipboard\" icon=\"arc:content-copy\"></paper-icon-button>\n</json-table>\n```\n\n### Styling\n\n`<json-table>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--json-table` | Mixin applied to the element | `{}`\n`--json-table-main-array-wrapper` | Mixin applied to the top level array's table view. This element has `overflow` property set.  | `{}`\n`--json-table-item-border-bottom-color` | Color of the bottom border in the array able items or in the object list row | `rgba(0, 0, 0, 0.12)`\n`--json-table-list-property-name-width` | Width of the property name for the list view for the object display | `120px`\n`--json-table-array-header-color` | Color of the array table header labels | ``\n`--json-table-array-body-color` | Color of the array table body values | ``",
      "summary": "",
      "path": "json-table.js",
      "properties": [
        {
          "name": "page",
          "type": "number | null | undefined",
          "description": "In pagination, page index",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "itemsPerPage",
          "type": "number | null | undefined",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "20",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "paginate",
          "type": "boolean | null | undefined",
          "description": "If true then the pagination will be enabled for the arrays.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "json",
          "type": "Object | null | undefined",
          "description": "JSON data to display.\nIf provided data is type of string then it will use the `JSON.stringify` function to\ncreate a JavaScript object from string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_jsonChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_renderJson",
          "type": "Object | null | undefined",
          "description": "A copy of the `json` object so it can be altered by the element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "parserError",
          "type": "boolean | null | undefined",
          "description": "Will be set to true if the passed `json` is a string and it's not valid JSON.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "isArray",
          "description": "Returns true if given argument is an array",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isObject",
          "description": "Returns true if given argument is an object.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isPrimitive",
          "description": "Check if given object is one of the primitives.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "An object to test"
            }
          ],
          "return": {
            "desc": "True if the object is one of:\n- string\n- number\n- boolean\n- undefined\n- null"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "getPropertyModel",
          "description": "Creates a data model for single proerty.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "A property name in the JSON structure"
            },
            {
              "name": "value",
              "type": "any",
              "description": "Value associated with the property."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property. Model contains following\nkeys:\n\n- key - a property name\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "getItemModel",
          "description": "Creates a model for a value.",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "any",
              "description": "Array item or property value to create a model from."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property value or array item. Model\ncontains following keys:\n\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "isEnum",
          "description": "Checks if given array is enum (contains primitives only).",
          "privacy": "public",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array",
              "description": "An array to test."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the array contains primitive values only. False otherwise."
          },
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_isEnumOrArray",
          "description": "Computes if the passed record's object is a type of array or enum.",
          "privacy": "protected",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_computeArraySize",
          "description": "Computes the size of item's value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "_jsonChanged",
          "description": "Handler for `json` attribute value change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json",
              "type": "(Object | Array)",
              "description": "JSON object to render."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setRenderJson",
          "description": "Sets `_renderJson` property after 1 ms.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json",
              "type": "(Object | Array)",
              "description": "JSON object to render."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 71,
          "column": 0
        },
        "end": {
          "line": 193,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.JsonTable",
      "attributes": [
        {
          "name": "page",
          "description": "In pagination, page index",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "items-per-page",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "paginate",
          "description": "If true then the pagination will be enabled for the arrays.",
          "sourceRange": {
            "file": "json-table-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "JsonTableMixin"
        },
        {
          "name": "json",
          "description": "JSON data to display.\nIf provided data is type of string then it will use the `JSON.stringify` function to\ncreate a JavaScript object from string.",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "parser-error",
          "description": "Will be set to true if the passed `json` is a string and it's not valid JSON.",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "json-table",
      "mixins": [
        "JsonTableMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "Common methods for `json-table` views",
      "summary": "",
      "path": "json-table-mixin.js",
      "properties": [
        {
          "name": "page",
          "type": "number | null | undefined",
          "description": "In pagination, page index",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "itemsPerPage",
          "type": "number | null | undefined",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "20"
        },
        {
          "name": "paginate",
          "type": "boolean | null | undefined",
          "description": "If true then the pagination will be enabled for the arrays.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "isArray",
          "description": "Returns true if given argument is an array",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "isObject",
          "description": "Returns true if given argument is an object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "Candidate to test for object"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "isPrimitive",
          "description": "Check if given object is one of the primitives.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "any",
              "description": "An object to test"
            }
          ],
          "return": {
            "desc": "True if the object is one of:\n- string\n- number\n- boolean\n- undefined\n- null"
          }
        },
        {
          "name": "getPropertyModel",
          "description": "Creates a data model for single proerty.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "A property name in the JSON structure"
            },
            {
              "name": "value",
              "type": "any",
              "description": "Value associated with the property."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property. Model contains following\nkeys:\n\n- key - a property name\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          }
        },
        {
          "name": "getItemModel",
          "description": "Creates a model for a value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "any",
              "description": "Array item or property value to create a model from."
            }
          ],
          "return": {
            "type": "Object.<String, any>",
            "desc": "Internal data model for a property value or array item. Model\ncontains following keys:\n\n- value - property value - without applying data model. Thois will be done in child elements\n- isObject - set if the value is type of Object\n- isEnum - set if the value is type of array and contains primitives only\n- isArray - set if the value is type of Array and contains complex objects\n- isPrimitive - set if the value is type a primitive"
          }
        },
        {
          "name": "isEnum",
          "description": "Checks if given array is enum (contains primitives only).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array",
              "description": "An array to test."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the array contains primitive values only. False otherwise."
          }
        },
        {
          "name": "_isEnumOrArray",
          "description": "Computes if the passed record's object is a type of array or enum.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ]
        },
        {
          "name": "_computeArraySize",
          "description": "Computes the size of item's value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 7
        },
        "end": {
          "line": 177,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "JsonTableMixin",
      "attributes": [
        {
          "name": "page",
          "description": "In pagination, page index",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "items-per-page",
          "description": "Number of items in pagination per page.\nAllowed values are 10, 15, 20, 25, 50 and 100.",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "paginate",
          "description": "If true then the pagination will be enabled for the arrays.",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
